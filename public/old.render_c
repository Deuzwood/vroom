old.render_c
render_c(){
    let curve = new THREE.Object3D();

    /*outer*/
    var shape = new THREE.Shape();
    shape.moveTo(0, this.size*12);
    shape.quadraticCurveTo(this.size*12, this.size*12, this.size*12, 0);
    shape.lineTo(this.size*12-1, 0);
    shape.quadraticCurveTo(this.size*12-1,this.size*12-1, 0, this.size*12-1);           

    var extrudeSettings = {
        amount : 1,
        steps : 1,
        bevelEnabled: false,
        curveSegments: 150
    };

    var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
    var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial({ color:0x777777 }));
    curve.add( mesh );

    

    /* inner */ 
    if(this.size!=1){
        var shape = new THREE.Shape();
        shape.moveTo(0, (this.size-1)*12);
        shape.quadraticCurveTo((this.size-1)*12, (this.size-1)*12, (this.size-1)*12, 0);
        shape.lineTo((this.size-1)*12-1, 0);
        shape.quadraticCurveTo((this.size-1)*12-1,(this.size-1)*12-1, 0, (this.size-1)*12-1);
        var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
        var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial({ color:0x777777 }));


        curve.add( mesh );
    }

    var extrudeSettings = {
        amount : 0,
        steps : 1,
        bevelEnabled: false,
        curveSegments: 150
    };
    
    /* Line */
    if(this.size!=1){
        var shape = new THREE.Shape();
        shape.moveTo(+6, (this.size-1)*12+6);
        shape.quadraticCurveTo((this.size-1)*12+6, (this.size-1)*12+6, (this.size-1)*12+6, +6);
        shape.lineTo((this.size-1)*12+6-1, +6);
        shape.quadraticCurveTo((this.size-1)*12+6-1,(this.size-1)*12+6-1, +6, (this.size-1)*12+6-1);
        var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
        var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial({ color:0xffffff }));
        mesh.position.z+=0.01
        curve.add( mesh );
    }

    /* ground */
    var shape = new THREE.Shape();
    shape.moveTo(0, this.size*12);
    shape.quadraticCurveTo(this.size*12, this.size*12, this.size*12, 0);
    shape.lineTo((this.size-1)*12, 0);
    shape.quadraticCurveTo((this.size-1)*12,(this.size-1)*12, 0,(this.size-1)*12);           

    

    var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
    var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial({ color:0x222222 }));
    curve.add( mesh );

    console.log('align is '+this.align)
    curve.rotation.x-=THREE.Math.degToRad(90)
    /*if(this.align=='x'){
        curve.rotation.z+=THREE.Math.degToRad(270)
        //curve.position.set(+0.5-6+-(this.size-1)*12,0,-0.5+6+(this.size-1)*12)
    }
    
    else if(this.align=='-x')
        curve.position.set(-(this.size-1)*12-6+0.5,this.from.y,this.from.z)
    else if(this.align=='z'){
        
        //curve.translateOnAxis(1,new THREE.Vector3(this.from.x,this.from.y,this.from.z+(this.size-1)*12+6-0.5))
        curve.position.set(+0.5+-6-(this.size-1)*12,0,-0.5+6+(this.size-1)*12)
    }*/
    curve.name = 'curve'+this.from.x+','+this.from.y+','+this.from.z


    let pivot = new THREE.Object3D()
    //pivot.position.set(-0.5+this.from.x+6+(this.size-1)*12,this.from.y,+0.5+this.from.z+(this.size-1)*12-(this.size-1)*12+6-0.5-6)
    //pivot.position.set(this.from.x+(this.size-1)*12,this.from.y,this.from.z+(this.size-1)*12)
    
    pivot.add(curve)
        console.log(this.side)
    if(this.side=='r')
        pivot.rotation.y=THREE.Math.degToRad(0)
    else if(this.side=='l')
        pivot.rotation.y=THREE.Math.degToRad(270)
    scene.add(pivot)
}